{"version":3,"sources":["components/logobar/logobar.js","components/navbar/navbar.js","components/poojadlcontainer/poojadlrow/poojadlrow.js","components/poojadlcontainer/poojadlcontainer.js","components/provider/provider.js","components/app/app.js","serviceWorker.js","redux/reducers/basic-reducer.js","redux/reducers/index.js","redux/store/store.js","util/history.js","index.js"],"names":["Logobar","align","Typography","variant","useStyles","makeStyles","toolbar","backgroundColor","height","Navbar","classes","Toolbar","className","Button","style","flex","theme","backdrop","zIndex","drawer","color","PoojaDlRow","props","useState","open","setOpen","phoneNumber","setPhoneNumber","contactType","setContactType","triedToSubmit","setTiredToSubmit","isSubmitRegistration","setIsSubmitRegistration","isSuccess","setIsSuccess","categoryChips","categories","map","category","index","Chip","label","key","Backdrop","CircularProgress","TableRow","TableCell","dlName","onClick","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Grid","container","alignItems","spacing","justify","direction","item","TextField","inputProps","min","textAlign","id","value","onChange","e","target","placeholder","FormControl","component","FormLabel","RadioGroup","aria-label","name","FormControlLabel","control","Radio","data","axios","post","then","res","catch","err","PoojaDlContainer","poojaRows","setPoojaRows","poojaJsx","setPoojaJsx","useEffect","get","row","TableContainer","Paper","Table","TableHead","TableBody","Provider","root","marginLeft","marginRight","App","exact","path","Boolean","window","location","hostname","match","initialState","combineReducers","basic","state","action","type","store","createStore","rootReducer","createBrowserHistory","ReactDOM","render","StrictMode","history","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.fa2aa197.chunk.js","sourcesContent":["import React from 'react'\nimport { Typography } from '@material-ui/core'\n\nexport default function Logobar() {\n    return (\n        <div align=\"center\">\n            <Typography variant=\"h2\">Pooja DL</Typography>\n            <Typography variant=\"body1\">For all of your Pooja needs</Typography>\n        </div>\n    )\n}","import React from 'react'\nimport { Button, Toolbar, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n    toolbar: {\n        backgroundColor: '#61c9bf',\n        height: '1%'\n    }\n})\n\nexport default function Navbar() {\n    const classes = useStyles()\n    return (\n        <div>\n            <Toolbar\n                className={classes.toolbar}>\n                    <Button variant=\"text\">About</Button>\n                    <div style={{ flex: 1 }}/>\n                    <Button variant=\"text\">Become a provider!</Button>\n            </Toolbar>\n        </div>\n    )\n}","import React, {useState} from 'react'\nimport axios from 'axios'\nimport { TableCell, Button, TableRow, Chip,\nCollapse, Box, TextField, RadioGroup, FormLabel, FormControl, FormControlLabel, Radio, Grid, Typography, makeStyles, Backdrop, CircularProgress } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n      zIndex: theme.zIndex.drawer + 1,\n      color: '#fff',\n    },\n  }));\n\nexport default function PoojaDlRow(props) {\n    const classes = useStyles()\n    const [open, setOpen] = useState(false)\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\n    const [contactType, setContactType] = useState(\"SMS\")\n\n    const [triedToSubmit, setTiredToSubmit] = useState(false)\n    const [isSubmitRegistration, setIsSubmitRegistration] = useState(false)\n    const [isSuccess, setIsSuccess] = useState(false)\n\n    const categoryChips = props.categories.map((category, index) => <Chip label={category} key={index}/>)\n\n    const createSubscription = () => {\n        setIsSubmitRegistration(true)\n        setTiredToSubmit(true)\n\n        const data = {\n            \"phoneNumber\": phoneNumber,\n            \"emailAddress\": \"\"\n        }\n\n        axios.post(\"/api/subscription/create?poojadl=\" + props.id, data)\n            .then(res => {\n                if(res.data){\n                    setIsSubmitRegistration(false)\n                    setIsSuccess(true)\n                    setOpen(false)\n                }\n            })\n            .catch(err=> {\n                setIsSubmitRegistration(false)\n                setIsSuccess(false)\n            })\n    }\n\n    return (\n        <>\n            <Backdrop className={classes.backdrop} open={isSubmitRegistration}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n            <TableRow key={props.index}>\n                <TableCell><Typography variant=\"body1\">{props.dlName}</Typography></TableCell>\n                <TableCell>\n                    {/* <Chip label=\"Basic\"/> */}\n                    {categoryChips}\n                </TableCell>\n                <TableCell>\n                    {triedToSubmit && isSuccess?\n                        <Typography variant=\"body2\">Subscribed!</Typography>\n                    :\n                    <Button variant=\"text\" onClick={() => setOpen(!open)}>\n                        {open?\"Close\":\"Sign up!\"}\n                    </Button>}\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <Grid container alignItems=\"center\" spacing={2} align=\"center\" justify=\"center\" direction=\"column\">\n                                <Grid item>\n                                    <Typography> Phone Number:</Typography>\n                                </Grid>\n                                <Grid item >\n                                    <TextField\n                                        inputProps={{min: 0, style: { textAlign: 'center' }}}\n                                        id=\"phone\" \n                                        value={phoneNumber}\n                                        onChange={(e) => setPhoneNumber(e.target.value)}\n                                        placeholder=\"Phone Number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <FormControl component=\"fieldset\">\n                                        <FormLabel component=\"legend\">Type</FormLabel>\n                                        <RadioGroup aria-label=\"type\" name=\"type1\" value={contactType} onChange={(e) => setContactType(e.target.value)}>\n                                            <FormControlLabel value=\"SMS\" control={<Radio />} label=\"SMS\" />\n                                            <FormControlLabel value=\"Whatsapp\" control={<Radio />} label=\"Whatsapp\" />\n                                        </RadioGroup>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item>\n                                    <Typography variant=\"caption\">Standard messaging rates may apply.</Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Button variant=\"outlined\" onClick={createSubscription}>\n                                        Submit!\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                            {triedToSubmit? \n                                !isSuccess && !isSubmitRegistration?(<div align=\"center\">There was an error! Try again later.</div>):<div/>:<div/>}\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </>\n    )\n}","import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport PoojaDlRow from './poojadlrow/poojadlrow'\nimport { Table, TableHead, TableBody, TableCell, TableRow, TableContainer, Paper} from '@material-ui/core'\n\n\n\nexport default function PoojaDlContainer(props){ \n    const [poojaRows, setPoojaRows] = useState([])\n    const [poojaJsx, setPoojaJsx] = useState(<TableRow/>)\n\n    useEffect(() => {\n        axios.get(\"/api/poojadl/all\")\n            .then(res => {\n                setPoojaRows(res.data)\n            })\n    }, [])\n\n    useEffect(() => {\n        setPoojaJsx(poojaRows.map((row, index) => <PoojaDlRow key={index} {...row}/> ))\n    }, [poojaRows])\n    \n\n    return (\n        <TableContainer component={Paper}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Categories</TableCell>\n                        <TableCell>Sign up</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {poojaJsx}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import React from 'react'\nimport { Grid, Typography } from '@material-ui/core'\n\n// Provider sign up page\nexport default function Provider() {\n    return (\n        <div>\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\n                <Grid item>\n                    <Typography variant=\"h5\">What is a <b>Provider?</b></Typography>\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"body2\">A provider is someone who can create and manage distribution lists. Become one today!</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"caption\">For more information, please contact johnny.edgett@kioshq.com.</Typography>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}","import React from 'react'\nimport Logobar from '../logobar/logobar'\nimport Navbar from '../navbar/navbar'\nimport { makeStyles } from '@material-ui/core'\nimport PoojaDlContainer from '../poojadlcontainer/poojadlcontainer'\nimport { Switch, Route } from 'react-router-dom'\nimport Provider from '../provider/provider'\n\nconst useStyles = makeStyles({\n    root: {\n        marginLeft: '20%',\n        marginRight: '20%'\n    }\n})\n\nexport default function App() {\n    const classes = useStyles()\n    return (\n        <div className={classes.root}>\n            <Logobar/>\n            <br/>\n            <Navbar/>\n            <br/>\n            <Switch>\n                <Route exact path=\"/\" component={PoojaDlContainer}/>\n                <Route exact path=\"/become-a-provider\" component={Provider}/>\n            </Switch>\n        </div>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {}\n\nexport default function basic(state = initialState, action){\n    switch(action.type) {\n        case \"\":\n            break\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport basic from './basic-reducer'\n\nexport default combineReducers({\n    basic\n})","import rootReducer from '../reducers/index'\nimport { createStore } from 'redux'\n\nconst store =  createStore(rootReducer)\nexport default store","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory();","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/app/app'\nimport * as serviceWorker from './serviceWorker'\nimport store from './redux/store/store'\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router-dom'\nimport history from './util/history'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router history={history}>\n        <App/>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}